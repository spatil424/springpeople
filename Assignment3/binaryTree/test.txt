package main // Changed from binarytree to main for a runnable example

import "fmt"

// Node represents an element in the binary tree.
// Each node holds an integer data value and can have up to two children:
// a Left child and a Right child.
type Node struct {
	Data  int   // The data stored in the node (changed from int32 for simplicity)
	Left  *Node // Pointer to the left child node (nil if no left child)
	Right *Node // Pointer to the right child node (nil if no right child)
}

// NewNode is a helper function to create a new Node with the given data.
// It's like a constructor for our Node.
func NewNode(data int) *Node {
	return &Node{Data: data} // Left and Right are automatically nil
}

// Insert adds a new value to the binary search tree.
// For a Binary Search Tree (BST):
// - If the new data is less than the current node's data, it goes into the left subtree.
// - If the new data is greater than the current node's data, it goes into the right subtree.
// - If the data is equal, we'll ignore it for simplicity (no duplicates).
// This method is "recursive," meaning it calls itself to work down the tree.


func (n *Node) Insert(data int) *Node {
	// If the current node (n) is nil, it means we've found an empty spot
	// where the new node should be placed. So, we create a new node and return it.
	if n == nil {
		return NewNode(data)
	}

	// If the data to insert is less than the current node's data...
	if data < n.Data {
		// ...we try to insert it into the left subtree.
		// The result of this insertion (which could be the new node or the existing left child)
		// becomes the new left child of the current node.
		n.Left = n.Left.Insert(data)
	} else if data > n.Data { // If the data to insert is greater...
		// ...we try to insert it into the right subtree.
		n.Right = n.Right.Insert(data)
	}
	// If data == n.Data, we do nothing (duplicates are not inserted in this simple version).

	// Return the current node (it might have been updated with new children).
	// This is important for the recursion to work correctly.
	return n
}

// Search looks for a value in the binary search tree.
// It returns the node containing the value and 'true' if found,
// otherwise it returns 'nil' and 'false'.


func (n *Node) Search(value int) (*Node, bool) {
	// If the current node is nil, it means we've reached the end of a branch
	// without finding the value.
	if n == nil {
		return nil, false // Value not found
	}

	// If the value we're looking for matches the current node's data...
	if value == n.Data {
		return n, true // Value found! Return the node and true.
	} else if value < n.Data { // If the value is less than the current node's data...
		// ...search in the left subtree.
		return n.Left.Search(value)
	} else { // Otherwise (value > n.Data)...
		// ...search in the right subtree.
		return n.Right.Search(value)
	}
}

// printInOrder performs an in-order traversal of the tree (Left, Root, Right).
// For a Binary Search Tree, this will print the node values in ascending (sorted) order.
// This is a good way to check if your tree is built correctly.
func printInOrder(n *Node) {
	if n == nil {
		return // Base case: if the node is nil, do nothing and return.
	}
	printInOrder(n.Left)      // 1. Visit the left child
	fmt.Printf("%d ", n.Data) // 2. Visit the current node (print its data)
	printInOrder(n.Right)     // 3. Visit the right child
}

func main() {
	// Let's create our binary search tree.
	// We start with an empty tree, so 'root' is nil.
	var root *Node

	fmt.Println("Building the Binary Search Tree...")

	// Insert some values into the tree.
	// The 'Insert' method returns the root of the tree (or subtree),
	// so we always assign its result back to 'root' (or the appropriate child).
	root = root.Insert(50) // 50 becomes the root
	root = root.Insert(30) // 30 is less than 50, goes to the left
	root = root.Insert(70) // 70 is greater than 50, goes to the right
	root = root.Insert(20) // 20 is less than 30
	root = root.Insert(40) // 40 is greater than 30 but less than 50
	root = root.Insert(60) // 60 is less than 70 but greater than 50
	root = root.Insert(80) // 80 is greater than 70

	/*
	   The tree will look something like this:
	         50
	        /  \
	       30   70
	      / \   / \
	     20 40 60 80
	*/

	fmt.Println("\nTree structure (in-order traversal - should be sorted):")
	printInOrder(root)
	fmt.Println() // For a new line after printing

	fmt.Println("\nSearching for values in the tree:")

	// Let's try searching for some values
	valuesToSearch := []int{40, 15, 70, 100, 20}
	for _, val := range valuesToSearch {
		foundNode, found := root.Search(val)
		if found {
			// We found the value! foundNode is a pointer to the node.
			fmt.Printf("Value %d was FOUND. Node data: %d\n", val, foundNode.Data)
		} else {
			// The value was not in the tree.
			fmt.Printf("Value %d was NOT FOUND.\n", val)
		}
	}

	fmt.Println("\n--- Example of searching in an empty (nil) tree ---")
	var emptyRoot *Node
	valToSearchInEmpty := 5
	_, foundInEmpty := emptyRoot.Search(valToSearchInEmpty)
	if foundInEmpty {
		fmt.Printf("Value %d found in empty tree (this shouldn't happen!).\n", valToSearchInEmpty)
	} else {
		fmt.Printf("Value %d not found in empty tree (as expected).\n", valToSearchInEmpty)
	}
}
